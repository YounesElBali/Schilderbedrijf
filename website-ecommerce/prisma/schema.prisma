// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Users {
  id             Int       @id @default(autoincrement())
  firstname      String
  lastname       String
  phone          Int
  email          String    @unique
  password       String
  profilePicture String
  homeAddress    String
  orders         Order[]
  comments       Comment[]
}

model Admin {
  id       String @id @default(cuid())
  username String @unique
  email    String @unique
  password String
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  image    String
  path     String    @unique
  products Product[]
}

model Product {
  id           Int              @id @default(autoincrement())
  name         String
  description  String?
  price        Float
  image        String
  articlenr    String              @default("0")
  isNew        Boolean          @default(false)
  inStock      Boolean          @default(true)
  deliveryCost Float            @default(6.95)
  category     Category         @relation(fields: [categoryId], references: [id])
  categoryId   Int
  orderItems   OrderItem[]
  bestseller   Bestseller?
  variants     ProductVariant[]
  CartItem     CartItem[]
  images       ProductImage[]
  traits       Traits[]
  Imges        Imges[]
}
model Imges{
  id         Int         @id @default(autoincrement())
  productId  Int
  product    Product     @relation(fields: [productId], references: [id])
  url       String // e.g., "Size 10", "Large"
}
model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  order     Int      @default(0) // For ordering images
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("user")
  cart      Cart?
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id              Int         @id @default(autoincrement())
  userId          Int?
  user            User?       @relation(fields: [userId], references: [id])
  totalPrice      Float
  status          String
  paymentId       String?
  email           String
  shippingAddress String
  billingAddress  String
  paymentMethod   String
  orderItems      OrderItem[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  Users           Users?      @relation(fields: [usersId], references: [id])
  usersId         Int?
}

model OrderItem {
  id        Int             @id @default(autoincrement())
  orderId   Int
  order     Order           @relation(fields: [orderId], references: [id])
  productId Int
  product   Product         @relation(fields: [productId], references: [id])
  variantId Int?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  rating    Int
  title     String
  content   String
  createdAt DateTime @default(now())
  user      Users    @relation(fields: [userId], references: [id])
  userId    Int
}

model Bestseller {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int      @unique
  rank      Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant {
  id         Int         @id @default(autoincrement())
  productId  Int
  product    Product     @relation(fields: [productId], references: [id])
  name       String // e.g., "Size 10", "Large"
  price      Float? // Optional, if null use product's base price
  inStock    Boolean     @default(true)
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Traits {
  id         Int         @id @default(autoincrement())
  productId  Int
  product    Product     @relation(fields: [productId], references: [id])
  name       String // e.g., "Size 10", "Large"
}